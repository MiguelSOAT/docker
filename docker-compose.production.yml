version: '3'
services:
  mongodb:
    container_name: mongodb
    hostname: mongodb
    image: mongo:5.0
    env_file:
      - mongodb.env
    ports:
      - 27017:27017
    restart: unless-stopped
    networks:
      - backend
    volumes:
      - mongodb_data:/data/db

  mysql:
    container_name: mysql
    hostname: mysql
    image: mysql
    command: --default-authentication-plugin=mysql_native_password
    env_file:
      - mysql.env
    ports:
      - 3306:3306
    volumes:
      - mysql_data:/var/lib/mysql
    restart: unless-stopped
    networks:
      - backend

  zookeeper:
    container_name: zookeeper
    hostname: zookeeper
    image: confluentinc/cp-zookeeper:7.3.0
    restart: unless-stopped
    env_file:
      - zookeeper.env
    networks:
      - backend

  broker:
    hostname: broker
    container_name: broker
    image: confluentinc/cp-kafka:7.3.0
    ports:
      - '9092:9092'
    env_file:
      - broker.env
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 50s
      retries: 10

  nginx:
    container_name: nginx
    hostname: nginx
    image: nginx:1.16.0-alpine
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ${NODEJS_CLOUD_FRONT_BUILD_PWD}:/var/www/html/cloud
      - ${NODEJS_PORTFOLIO_PWD}:/var/www/html/portfolio
    ports:
      - '80:80'
    networks:
      - backend
    restart: unless-stopped

  cloud-core:
    container_name: cloud-core
    hostname: cloud-core
    depends_on:
      broker:
        condition: service_healthy
    networks:
      - backend
    image: ${NODEJS_CONTAINER_IMAGE}
    user: ${NODEJS_USER}
    command: ${NODEJS_COMMAND}
    ports:
      - '8080:8080'
    environment:
      NODE_ENV: ${NODEJS_ENV}
    volumes:
      - ${NODEJS_CLOUD_CORE_PWD}:/home/node/project
      - node_modules_cloud-core:/home/node/project/node_modules
    working_dir: /home/node/project
    restart: unless-stopped

  telegram-bot:
    container_name: telegram-bot
    hostname: telegram-bot
    depends_on:
      broker:
        condition: service_healthy
    networks:
      - backend
    image: ${NODEJS_CONTAINER_IMAGE}
    user: ${NODEJS_USER}
    command: ${NODEJS_COMMAND}
    environment:
      NODE_ENV: ${NODEJS_ENV}
    volumes:
      - ${NODEJS_TELEGRAM_BOT_PWD}:/home/node/project
      - node_modules_telegram-bot:/home/node/project/node_modules:ro
    working_dir: /home/node/project
    restart: unless-stopped

networks:
  backend:
    driver: bridge

volumes:
  mongodb_data:
  mysql_data:
  node_modules_telegram-bot:
  node_modules_cloud-core:
